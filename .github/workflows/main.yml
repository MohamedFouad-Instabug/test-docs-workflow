name: Analyze PR Changes and Generate Docs with Gemini AI

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  analyze-and-update-docs:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      pull-requests: write
      issues: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract PR information
        id: extract-pr-info
        run: |
          echo "üìã Extracting PR information..."
          
          # Get PR details
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_BODY="${{ github.event.pull_request.body || '' }}"
          PR_NUMBER="${{ github.event.pull_request.number }}"
          PR_URL="${{ github.event.pull_request.html_url }}"
          
          # Get changed files
          CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})
          
          # Get the diff (limit to 10000 characters to avoid token issues)
          DIFF_CONTENT=$(git diff ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | head -c 10000)
          
          echo "PR Title: $PR_TITLE"
          echo "PR Number: $PR_NUMBER"
          echo "Changed files count: $(echo "$CHANGED_FILES" | wc -l)"
          echo "Changed files:"
          echo "$CHANGED_FILES"
          
          # Store in outputs - escape newlines for GitHub Actions
          echo "pr_title=$PR_TITLE" >> $GITHUB_OUTPUT
          echo "pr_body=$PR_BODY" >> $GITHUB_OUTPUT
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "pr_url=$PR_URL" >> $GITHUB_OUTPUT
          echo "changed_files<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGED_FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "diff_content<<EOF" >> $GITHUB_OUTPUT
          echo "$DIFF_CONTENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "‚úÖ PR information extracted successfully"
      
      - name: Clone documentation repository
        id: clone-docs
        run: |
          echo "üìö Cloning documentation repository..."
          
          # Clone the docs repo
          git clone https://x-access-token:${{ secrets.DOCS_PAT }}@github.com/MohamedFouad-Instabug/Docs.git docs-repo
          cd docs-repo
          
          # Get list of markdown files (limit to 20)
          MD_FILES=$(find . -name "*.md" -type f | head -20)
          
          # Get file structure
          FILE_STRUCTURE=$(find . -type f -name "*.md" | head -20 | sed 's|^\./||')
          
          echo "Found markdown files:"
          echo "$FILE_STRUCTURE"
          
          # Store in outputs
          echo "md_files<<EOF" >> $GITHUB_OUTPUT
          echo "$MD_FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "file_structure<<EOF" >> $GITHUB_OUTPUT
          echo "$FILE_STRUCTURE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "‚úÖ Documentation repository cloned successfully"
      
      - name: Match files and extract content
        id: match-files
        run: |
          echo "üîç Matching changed files to documentation..."
          
          # Get the changed files from the original repository context (before changing directories)
          CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})
          PR_TITLE="${{ github.event.pull_request.title }}"
          
          echo "Changed files to process:"
          echo "$CHANGED_FILES"
          
          # Now change to docs repo for file matching
          cd docs-repo
          
          # Initialize variables
          MATCHED_FILES=""
          MATCHED_CONTENT=""
          
          # Process each changed file - use a simpler approach
          while IFS= read -r file; do
            if [[ -n "$file" ]]; then
              echo "Analyzing file: $file"
              
              # Extract filename without extension
              FILENAME=$(basename "$file" | sed 's/\.[^.]*$//')
              DIRNAME=$(dirname "$file")
              
              echo "  Filename: $FILENAME"
              echo "  Directory: $DIRNAME"
              
              # Look for matching documentation files
              POTENTIAL_MATCHES=""
              
              # 1. Direct filename match
              if find . -name "${FILENAME}.md" -type f | grep -q .; then
                POTENTIAL_MATCHES="$POTENTIAL_MATCHES $(find . -name "${FILENAME}.md" -type f)"
                echo "  Found direct match: ${FILENAME}.md"
              fi
              
              # 2. Directory name match
              if [[ "$DIRNAME" != "." ]] && find . -path "*/${DIRNAME}/*.md" -type f | grep -q .; then
                POTENTIAL_MATCHES="$POTENTIAL_MATCHES $(find . -path "*/${DIRNAME}/*.md" -type f | head -3)"
                echo "  Found directory match for: $DIRNAME"
              fi
              
              # 3. PR title keyword match
              TITLE_KEYWORDS=$(echo "$PR_TITLE" | tr '[:upper:]' '[:lower:]' | tr ' ' '\n' | grep -E '^[a-z]{3,}$' | head -5)
              for keyword in $TITLE_KEYWORDS; do
                if find . -name "*.md" -type f -exec grep -l "$keyword" {} \; | grep -q .; then
                  POTENTIAL_MATCHES="$POTENTIAL_MATCHES $(find . -name "*.md" -type f -exec grep -l "$keyword" {} \; | head -2)"
                  echo "  Found keyword match for: $keyword"
                fi
              done
              
              # Add matched files to our list
              if [[ -n "$POTENTIAL_MATCHES" ]]; then
                MATCHED_FILES="$MATCHED_FILES $POTENTIAL_MATCHES"
                
                # Extract content from matched files (limit each file to 2000 chars)
                for match in $POTENTIAL_MATCHES; do
                  if [[ -f "$match" ]]; then
                    CONTENT=$(head -c 2000 "$match")
                    MATCHED_CONTENT="$MATCHED_CONTENT\n\n--- File: $match ---\n$CONTENT"
                    echo "  Extracted content from: $match"
                  fi
                done
              else
                echo "  No matches found for: $file"
              fi
            fi
          done <<< "$CHANGED_FILES"
          
          # Limit total content to 15000 characters
          MATCHED_CONTENT=$(echo -e "$MATCHED_CONTENT" | head -c 15000)
          
          echo "Matched files: $MATCHED_FILES"
          echo "Content length: ${#MATCHED_CONTENT} characters"
          
          # Store in outputs
          echo "matched_files<<EOF" >> $GITHUB_OUTPUT
          echo "$MATCHED_FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "matched_content<<EOF" >> $GITHUB_OUTPUT
          echo "$MATCHED_CONTENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "‚úÖ File matching completed"
      
      - name: Generate documentation with Gemini AI
        id: gemini-analysis
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          echo "üß† Analyzing with Gemini AI..."
          
          # Simple test to ensure we're in the right context
          echo "Current directory: $(pwd)"
          echo "Repository: ${{ github.repository }}"
          
          # Prepare the prompt for Gemini
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_BODY="${{ github.event.pull_request.body || '' }}"
          PR_NUMBER="${{ github.event.pull_request.number }}"
          PR_URL="${{ github.event.pull_request.html_url }}"
          CHANGED_FILES="${{ steps.extract-pr-info.outputs.changed_files }}"
          DIFF_CONTENT="${{ steps.extract-pr-info.outputs.diff_content }}"
          FILE_STRUCTURE="${{ steps.clone-docs.outputs.file_structure }}"
          MATCHED_FILES="${{ steps.match-files.outputs.matched_files }}"
          MATCHED_CONTENT="${{ steps.match-files.outputs.matched_content }}"
          
          echo "PR Title: $PR_TITLE"
          echo "Changed Files: $CHANGED_FILES"
          
          # Simple test response for now
          echo "needs_update=true" >> $GITHUB_OUTPUT
          echo "reason=Test analysis completed" >> $GITHUB_OUTPUT
          echo "files_to_update=" >> $GITHUB_OUTPUT
          echo "files_to_create=" >> $GITHUB_OUTPUT
          echo "update_summary=Test documentation update needed" >> $GITHUB_OUTPUT
          echo "gemini_response=Test response" >> $GITHUB_OUTPUT
          
          echo "‚úÖ Gemini analysis completed successfully"
      
      - name: Create documentation PR
        id: create-docs-pr
        if: steps.gemini-analysis.outputs.needs_update == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.DOCS_PAT }}
          script: |
            try {
              console.log('üìù Creating documentation PR based on Gemini analysis...');
              
              const prNumber = context.issue.number;
              const prTitle = context.payload.pull_request.title;
              const prUrl = context.payload.pull_request.html_url;
              const reason = '${{ steps.gemini-analysis.outputs.reason }}';
              const updateSummary = '${{ steps.gemini-analysis.outputs.update_summary }}';
              const geminiResponse = '${{ steps.gemini-analysis.outputs.gemini_response }}';
              
              // Parse files to update/create from the outputs
              const filesToUpdate = '${{ steps.gemini-analysis.outputs.files_to_update }}'.split('\n').filter(f => f.trim());
              const filesToCreate = '${{ steps.gemini-analysis.outputs.files_to_create }}'.split('\n').filter(f => f.trim());
              
              console.log('Files to update:', filesToUpdate);
              console.log('Files to create:', filesToCreate);
              
              // Create branch name
              const branchName = 'docs-update-' + Date.now();
              const docsOwner = 'MohamedFouad-Instabug';
              const docsRepo = 'Docs';
              const baseBranch = 'main';
              
              console.log('Target repository:', docsOwner + '/' + docsRepo);
              console.log('Branch name:', branchName);
              
              // Get the base branch ref
              const baseRef = await github.rest.git.getRef({
                owner: docsOwner,
                repo: docsRepo,
                ref: 'heads/' + baseBranch
              });
              
              // Create a new branch
              await github.rest.git.createRef({
                owner: docsOwner,
                repo: docsRepo,
                ref: 'refs/heads/' + branchName,
                sha: baseRef.data.object.sha
              });
              
              console.log('Branch created successfully');
              
              // Create or update files based on Gemini's suggestions
              const filesChanged = [];
              
              // For now, create a summary documentation file
              const fileName = 'updates/' + new Date().toISOString().split('T')[0] + '-pr-' + context.issue.number + '.md';
              
                             const docsContent = '# Documentation Update - PR #' + prNumber + '\n\n## Overview\nThis documentation update was generated by Gemini AI based on changes in [PR #' + prNumber + '](' + prUrl + ').\n\n## Analysis Results\n- **Reason for Update**: ' + reason + '\n- **Update Summary**: ' + updateSummary + '\n\n## Files Identified for Update\n' + (filesToUpdate.length > 0 ? filesToUpdate.map(f => '- ' + f).join('\n') : '- None specified') + '\n\n## Files Identified for Creation\n' + (filesToCreate.length > 0 ? filesToCreate.map(f => '- ' + f).join('\n') : '- None specified') + '\n\n## Gemini AI Analysis\n```\n' + geminiResponse + '\n```\n\n## Next Steps\n1. Review the AI-generated analysis\n2. Update the identified documentation files\n3. Create new documentation files as needed\n4. Ensure all changes are properly documented\n\n---\n*This documentation was automatically generated by the GitHub Actions workflow using Gemini AI.*';
              
              await github.rest.repos.createOrUpdateFileContents({
                owner: docsOwner,
                repo: docsRepo,
                path: fileName,
                message: 'Add AI-generated documentation update based on PR analysis',
                content: Buffer.from(docsContent).toString('base64'),
                branch: branchName
              });
              
              filesChanged.push(fileName);
              console.log('Documentation file created:', fileName);
              
              // Create pull request in docs repo
                             const docsPRTitle = 'Documentation Update - PR #' + prNumber + ': ' + prTitle;
               const docsPRBody = '## AI-Generated Documentation Update\n\nThis PR was automatically generated by Gemini AI based on changes in [PR #' + prNumber + '](' + prUrl + ') in the ' + context.repo.owner + '/' + context.repo.repo + ' repository.\n\n### AI Analysis Results\n- **Reason**: ' + reason + '\n- **Summary**: ' + updateSummary + '\n\n### Files Changed\n' + filesChanged.map(f => '- ' + f).join('\n') + '\n\n### What the AI Found\nThe AI analyzed the PR changes and determined that documentation updates are needed. The analysis included:\n- PR title and description\n- Changed files and their diffs\n- Existing documentation structure\n- Matched documentation files\n\n### Next Steps\n1. Review the AI-generated analysis\n2. Update the identified documentation files\n3. Create new documentation files as needed\n4. Ensure all changes are properly documented\n\n---\n*This PR was automatically generated by the GitHub Actions workflow using Gemini AI.*';
              
              const docsPR = await github.rest.pulls.create({
                owner: docsOwner,
                repo: docsRepo,
                title: docsPRTitle,
                head: branchName,
                base: baseBranch,
                body: docsPRBody
              });
              
              console.log('PR created successfully:', docsPR.data.number);
              
              // Comment on original PR about the docs PR
                             const commentBody = '## AI-Generated Documentation Update Created ‚úÖ\n\nI have analyzed your PR changes using Gemini AI and created a documentation update in the Docs repository.\n\n### Documentation PR Created\n- Repository: [' + docsOwner + '/' + docsRepo + '](' + docsPR.data.html_url + ')\n- PR Number: #' + docsPR.data.number + '\n- Title: ' + docsPRTitle + '\n\n### AI Analysis Results\n- **Reason**: ' + reason + '\n- **Summary**: ' + updateSummary + '\n\n### What the AI Analyzed\n- PR title and description\n- Changed files and their diffs\n- Existing documentation structure\n- Matched documentation files\n\n### Files Identified\n- **To Update**: ' + (filesToUpdate.length > 0 ? filesToUpdate.join(', ') : 'None specified') + '\n- **To Create**: ' + (filesToCreate.length > 0 ? filesToCreate.join(', ') : 'None specified') + '\n\n### Next Steps\n1. Review the AI-generated analysis in the Docs PR\n2. Update the identified documentation files\n3. Create new documentation files as needed\n4. Merge the documentation PR when ready\n\n---\n*This comment was automatically generated by the GitHub Actions workflow using Gemini AI.*';
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody
              });
              
            } catch (error) {
              console.error('Error creating documentation PR:', error);
              console.error('Error details:', error.response?.data);
              
              // Comment on original PR about the error
                             const errorBody = '## Documentation Update Failed ‚ùå\n\nI encountered an error while trying to create a documentation update for your PR.\n\n### Error Details\n- Error: ' + error.message + '\n- Details: ' + JSON.stringify(error.response?.data || {}) + '\n\n### What happened\nThe workflow analyzed your PR changes with Gemini AI and determined documentation updates were needed, but encountered an issue while creating the PR in the Docs repository.\n\n### Next Steps\n1. Check if the Docs repository is accessible\n2. Verify the DOCS_PAT secret is properly configured\n3. Review the workflow logs for more details\n\n---\n*This comment was automatically generated by the GitHub Actions workflow.*';
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: errorBody
              });
            }
      
      - name: No documentation needed
        if: steps.gemini-analysis.outputs.needs_update == 'false'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const reason = '${{ steps.gemini-analysis.outputs.reason }}';
            
                         const commentBody = '## Documentation Analysis Complete ‚úÖ\n\nI have analyzed your PR changes using Gemini AI and determined that **no documentation updates are needed**.\n\n### AI Analysis Results\n- **Reason**: ' + reason + '\n\n### What the AI Analyzed\n- PR title and description\n- Changed files and their diffs\n- Existing documentation structure\n- Matched documentation files\n\n### Conclusion\nThe AI determined that the changes in this PR do not require updates to the documentation repository. This could be because:\n- The changes are internal/technical and don\'t affect user-facing documentation\n- The changes are already well-documented\n- The changes don\'t introduce new features or APIs that need documentation\n\n---\n*This analysis was automatically generated by the GitHub Actions workflow using Gemini AI.*';
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            }); 
